import java.text.SimpleDateFormat
plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion rootProject.ext.android['compileSdkVersion']
    buildToolsVersion rootProject.ext.android['buildToolsVersion']

    defaultConfig {
        applicationId rootProject.ext.android['applicationId']
        minSdkVersion rootProject.ext.android['minSdkVersion']
        targetSdkVersion rootProject.ext.android['targetSdkVersion']
        versionCode rootProject.ext.android['versionCode']
        versionName rootProject.ext.android['versionName']

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        multiDexEnabled true
    }



    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        dataBinding  = true
    }

    lintOptions {
        abortOnError false
    }

    def currentVersionCode = rootProject.ext.android['versionCode'];
    def currentBuildTime = getCurrentTime(new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss"));

    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                outputFileName = "app_v${currentVersionCode}_${currentBuildTime}.apk"
            }
    }

    packagingOptions {
        exclude  'META-INF/*'
    }

}


// 发布时间
def getCurrentTime(sdf) {
    //设置为东八区
    sdf.setTimeZone(TimeZone.getTimeZone("Asia/Shanghai"));
    Date newDate = new Date()
    String dateStr = sdf.format(newDate)
    return dateStr
}

def getVersionCode() {
    def versionFile = file('version.properties')
    // 判断文件读取异常
    if (versionFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['VERSION_CODE'].toInteger()
//        def runTasks = gradle.startParameter.taskNames
//        if ('assembleRelease' in runTasks) {//仅在assembleRelease任务是增加版本号,其他渠道包在此分别配置
        // 版本号自增之后再写入文件（此处是关键，版本号自增+1）
//        versionProps['VERSION_CODE'] = (++versionCode).toString()
//        versionProps.store(versionFile.newWriter(), null)
//        }
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

dependencies {
    annotationProcessor  rootProject.ext.dependencies['arouter-compiler']

    api project(":lib_base")
    api project(":lib_res")

    if (!isNeedHomeModule.toBoolean()) {
        api project(':module_home')
    }
    if (!isNeedMsgModule.toBoolean()) {
        api project(':module_msg')
    }

    implementation 'androidx.multidex:multidex: 2.0.1'
}